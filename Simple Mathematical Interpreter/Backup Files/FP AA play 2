#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#define T Variable
#define MAXSIZE 100

typedef union
{
    float floatdata;
    char chardata;
} Item;

// Struct to create an array of strings
typedef struct
{
    char str[150];
} Line;

// Variable Struct such that each node in BST is a variable
typedef struct
{
    char key[20];
    float value;
} Variable;

// BST Implementation
typedef struct Node
{
    Variable data;
    struct Node *right;
    struct Node *left;
} Node;

Node* newNode (Variable v)
{
    Node *n = malloc(sizeof(Node));
    n -> data = v;
    n -> right = NULL;
    n -> left = NULL;
    return n;
}

Node* insert (Node *n, Variable v)
{
    if (n == NULL)
        return newNode(v);

    if (strcasecmp(v.key, (n -> data).key) == -1)
        n -> left = insert(n -> left, v);

    else if (strcasecmp(v.key, (n -> data).key) == 1)
        n -> right = insert(n -> right, v);

    return n;
}

Node* search(Node *n, char str[])
{
    if (n == NULL)
        return NULL;
    if (strcasecmp((n -> data).key, str) == 0)
        return n;
    else if(strcasecmp(str, (n -> data).key) == -1)
        return search(n -> left,str);
    else
        return search(n -> right,str);
}

void InOrderPrint (Node *temp)
{
    if (temp != NULL)
    {
        InOrderPrint (temp -> left);
        printf("* %s = %.3f\n",(temp -> data).key, (temp -> data).value);
        InOrderPrint (temp -> right);
    }
}
// End BST

// Heap Implementation
void swapTwo (T **item1, T **item2)
{
    T* temp = *item1;
    *item1 = *item2;
    *item2 = temp;
}

void heapify(T *arr[], int n, int i)
{

    int largest = i;
    int leftChild = 2*i+1;
    int rightChild = 2*i+2;

    if(leftChild < n && arr[leftChild]->value > arr[largest]->value)
    {
        largest = leftChild;
    }

    if(rightChild < n && arr[rightChild]->value > arr[largest]->value )
    {
        largest = rightChild;
    }

    if(largest != i)
    {

        swapTwo(&arr[i], &arr[largest]);
        heapify(arr, n, largest);
    }
}

void printArray(T *arr[], int n)
{

    for(int i = 0; i < n; i++)
    {
        printf("* %s = %.2f\n", arr[i]->key, arr[i]->value);
    }

    printf("\n");
}

void deleteMax(T *arr[], int n)
{
    swapTwo(arr, &arr[n]);
    heapify(arr, n, 0);
}

void heapSort(T *arr[], int n)
{

    for(int i = n/2-1; i >=0; i--)
    {
        heapify(arr, n, i);
    }

    for(int i = n-1; i > 0; i--)
    {
        deleteMax(arr, i);
    }
}
// End Heap

// Stack Implementation
typedef struct
{
    Item items[MAXSIZE];
    int top;
} Stack;

Stack* initialize ()
{
    Stack *s = malloc(sizeof(Stack));
    s->top = 0;
    return s;
}

void push (Stack *s, Item value)
{
    s -> items[s -> top] = value;
    s -> top++;
}

Item pop (Stack *s)
{
    Item value;
    s -> top--;
    value = s -> items[s -> top];
    return value;
}

int isEmpty (Stack *s)
{
    if (s -> top == 0)
    {
        return 1;
    }
    else
        return 0;
}

Item top (Stack *s)
{
    return s -> items[s -> top-1];
}
// End Stack

// Expression Evaluation
int priority (char c)
{
    switch (c)
    {
    case '+':
    case '-':
        return 0;
    case '*':
    case '/':
        return 1;
    case '^':
        return 2;
    case '(':
        return 3;
    }
    return -1;
}

// To insert spaces between the terms of the expression to be ready for infix->postfix function
char* infixWithSpaces(char *exp)
{
    char *inf = malloc (100);
    memset(inf,0,strlen(inf));
    char space = ' ';
    int i = 0;
    for ( i = 0 ; i < strlen(exp) ; i++ )
    {
        if (exp[i] == '+' || exp[i] == '*' || exp[i] == '/' || exp[i] == '^')
        {
            strncat(inf,&space,1);
            strncat(inf,&exp[i],1);
            strncat(inf,&space,1);
        }

        else if (exp[i] == '-')
        {
            if (exp[i-1] == '+' || exp[i-1] == '*' || exp[i-1] == '/' || exp[i-1] == '^' || exp[i-1] == '(' || exp[i-1] == ')' || i == 0)
            {
                strncat(inf,&exp[i],1);
            }
            else
            {
                strncat(inf,&space,1);
                strncat(inf,&exp[i],1);
                strncat(inf,&space,1);
            }
        }

        else if (exp[i] == '(')
        {
            strncat(inf,&exp[i],1);
            strncat(inf,&space,1);
        }

        else if (exp[i] == ')')
        {
            strncat(inf,&space,1);
            strncat(inf,&exp[i],1);
        }

        else
        {
            strncat(inf,&exp[i],1);
        }
    }
    return (inf);
}

// Infix to Postfix conversion
char* infixtoPostfix (char *infexp)
{

    Stack *s = initialize();

    char *token = strtok (infexp," ");
    char *postexp = malloc (100);
    Item a, b;

    memset(postexp,0,strlen(postexp));

    while (token != NULL)
    {
        if (!((strlen(token) == 1) && ( token[0] == '+' || token[0] == '-' || token[0] == '*' || token[0] == '/' || token[0] == '^' || token[0] == '(' || token[0] == ')')))
        {
            strncat (postexp,token,strlen(token));
            char v = ' ';
            strncat (postexp,&v,1);
        }

        else if (token[0] == ')')
        {
            while (!isEmpty(s) && top(s).chardata != '(')
            {
                char f = pop(s).chardata;
                strncat(postexp,&f,1);
                f = ' ';
                strncat(postexp,&f,1);
            }

            pop(s);
        }

        else if (isEmpty(s))
        {
            a.chardata = token[0];
            push (s,a);
        }

        else
        {
            while(!isEmpty(s) && priority(top(s).chardata) >= priority(token[0]) && top(s).chardata != '(')
            {
                char u = pop(s).chardata;
                strncat(postexp,&u,1);
                u = ' ';
                strncat(postexp,&u,1);
            }
            b.chardata = token[0];
            push (s,b);

        }

        token = strtok (NULL, " ");

    }

    while(!isEmpty(s))
    {
        char w = pop(s).chardata;
        strncat(postexp,&w,1);
        w = ' ';
        strncat(postexp,&w,1);
    }

    return postexp;

}

// Calculation
float evaluate (char x, float op1, float op2)
{

    if (x == '+')
        return (op1 + op2);
    if (x == '-')
        return (op1 - op2);
    if (x == '*')
        return (op1 * op2);
    if (x == '/')
        return (op1 / op2);
    if (x == '^')
        return (pow(op1,op2));
    return 0;

}

// Postfix expression evaluation
float evaluatePostfix (char *exp, Node *root)
{
    Stack *s = initialize();
    float op1, op2, val;
    Item x, m;
    char *p = strtok(exp," ");
    while ( p != NULL )
    {
        if ((strlen(p) == 1) && ( p[0] == '+' || p[0] == '-' || p[0] == '*' || p[0] == '/' || p[0] == '^'))
        {
            op2 = pop(s).floatdata;
            op1 = pop(s).floatdata;
            val = evaluate (*p,op1,op2);
            x.floatdata = val;
            push(s,x);
        }

        // To check if the term is variable and search for it in the BST
        else if ((p[0] >= 'a' && p[0] <= 'z') || (p[0] >= 'A' && p[0] <= 'Z'))
        {
            Node *searched = NULL;
            searched = search(root, p);
            if (searched != NULL)
            {
                m.floatdata = (searched -> data).value;
                push (s, m);
            }
            else
            {
                printf ("** ERROR IN FILE **\n\n");
                exit(0);
            }
        }
        else
        {
            float n = atof(p);
            m.floatdata = n;
            push (s,m);
        }
        p = strtok (NULL," ");
    }
    float k = pop(s).floatdata;
    return k;
}
// End expression calculation

// To remove all spaces in the file so we can tokenize each line and get a key before "=" and a value after "="
void removeSpaces(char *str)
{
    int count = 0;

    for (int i = 0; str[i]; i++)
        if (str[i] != ' ')
            str[count++] = str[i];
    str[count] = '\0';
}

// To stop the program if the equal sign is missing in the equation
int checkEqualSign (char str[])
{
    int i;
    for ( i = 0 ; i < strlen(str) ; i++ )
    {
        if (str[i] == '=')
            return 1;
    }
    return 0;
}

// To stop the program if there are multiple variables in the equation
int checkSign (char str[])
{
    int i;
    for (i=0; i<strlen(str); i++)
    {
        if (str[i] == '+' || str[i] == '*' || str[i] == '/' || str[i] == '^' || str[i] == '-' || str[i] == '=' || str[i] == '(' || str[i] == ')')
            return 1;
    }
    return 0;
}

//To check that number of closed brackets is equal to the number of open brackets
void checkBrackets(char str[])
{
    int i;
    int countOpen=0;
    int countClosed=0;
    for (i=0; i<strlen(str); i++)
    {
        if (str[i] == '(')
            countOpen++;
        else if (str[i] == ')')
            countClosed++;
    }

    if (countOpen!=countClosed)
    {
        printf("\n** ERROR IN FILE **\n\n");
        printf("\n** Please check the brackets  **\n\n");
        exit(0);
    }
}

//To check if there was a consecutive  in any operator
void checkConsecutiveSign(char str[])
{
    int i;
    for (i=0; i<strlen(str); i++)
    {
        if (str[i] == '+' || str[i] == '*' || str[i] == '/' || str[i] == '^' || str[i] == '=' )
        {
            if (str[i+1] == '+' || str[i+1] == '*' || str[i+1] == '/' || str[i+1] == '^' || str[i+1] == '=')
            {
                printf("\n\n** ERROR IN FILE **\n\n");
                printf("\n\n** Please check if there was any Consecutive Operators **\n\n");
                exit(0);
            }
        }
        else if (str[i] == '(')
        {
            if (str[i+1] == '+' || str[i+1] == '*' || str[i+1] == '/' || str[i+1] == '^' || str[i+1] == '=')
            {
                printf("\n\n** ERROR IN FILE **\n\n");
                printf("\n\n** Please check if there was a Consecutive Operator after a bracket  **\n\n");
                exit(0);
            }
        }
        else if (str[i] == ')')
        {
            if (str[i-1] == '+' || str[i-1] == '*' || str[i-1] == '/' || str[i-1] == '^' || str[i-1] == '=' ||str[i-1] == '-')
            {
                printf("\n\n** ERROR IN FILE **\n\n");
                printf("\n\n** Please check if there was a Consecutive Operator before a bracket  **\n\n");
                exit(0);
            }
        }
    }
}

// Loading Src.txt
void loadFile ()
{
    FILE *fp;
    fp = fopen("Src.txt","r");

    int lines = 0;
    int i;
    Line l[100];

    if(fp == NULL)
    {
        printf("Error !\n");
        exit(0);
    }

    // Inserting each equation existing in the file into an array of strings "l[100]"
    while (!feof(fp))
    {
        fscanf (fp, "%[^\n]\n", l[lines].str);
        lines++;
    }

    // Fixing the lines in the files by removing spaces and checking for the "="
    for ( i = 0 ; i < lines ; i++ )
    {
        removeSpaces(l[i].str);
        if (checkEqualSign(l[i].str) == 0)
        {
            printf ("\n** ERROR IN FILE **\n\n");
            printf("\n\n** Please check if there was any Operator before the Equal Sign  **\n\n");
            exit(0);
        }
        printf ("* %s\n",l[i].str);
    }
    printf ("\n");
}

// Reading the file and inserting its components into the BST and the heap
Node *readFile (FILE *fp, T **arr)
{
    int lines = 0;
    int i;
    Line l[100];


    if(fp == NULL)
    {
        printf("Error !\n");
        exit(0);
    }

    // Inserting each equation existing in the file into an array of strings "l[100]"
    while (!feof(fp))
    {
        fscanf (fp, "%[^\n]\n", l[lines].str);
        lines++;
    }


    // The variable in the first equation
    Variable v1;
    // The other variables
    Variable v;

    // Our Tokens
    char *p1;
    char *p2;

    // Fixing the lines in the files by removing spaces and checking for the "="
    for ( i = 0 ; i < lines ; i++ )
    {
        removeSpaces(l[i].str);
        if (checkEqualSign(l[i].str) == 0)
        {
            printf ("\n** ERROR IN FILE **\n\n");
            printf("\n\n** Please check the Equal Sign  **\n\n");
            exit(0);
        }
    }

    p1 = strtok (l[0].str,"=");
    if (checkSign(p1))
    {
        printf("\n** ERROR IN FILE **\n\n");
        printf("\n\n** Please check the Equal Sign  **\n\n");
        exit(0);
    }
    p2 = strtok (NULL, "=");
    if (checkSign(p2)==1)
    {
        printf("\n\n** ERROR IN FILE **\n\n");
        printf("\n\n** Please check if there was any Operator beside your first value **\n\n");
        exit(0);
    }
    checkBrackets(p2);
    checkConsecutiveSign(p2);

    Variable *vptr = malloc(sizeof(Variable));

    // Initializing the BST, inserting the first variable and calculating its value
    Node *root = NULL;
    strcpy(v1.key, p1);
    strcpy(vptr -> key, p1);
    v1.value = evaluatePostfix(infixtoPostfix(infixWithSpaces(p2)), root);
    vptr -> value = v1.value;

    arr[0] = vptr;
    root = insert (root, v1);

    // Inserting the remaining variables to the BST & heap and calculating the value of each variable
    for ( i = 1 ; i < lines ; i++ )
    {
        if (checkSign(p1))
        {
            printf("\n** ERROR IN FILE **\n\n");
            printf("\n\n** Please check the Equal Sign  **\n\n");
            exit(0);
        }
        vptr = malloc(sizeof(Variable));
        p1 = strtok (l[i].str,"=");
        p2 = strtok (NULL, "=");
        checkBrackets(p2);
        checkConsecutiveSign(p2);
        strcpy(v.key, p1);
        strcpy(vptr -> key, p1);
        v.value = evaluatePostfix(infixtoPostfix(infixWithSpaces(p2)), root);
        vptr -> value = v.value;
        arr[i] = vptr;
        insert (root, v);
    }
    return root;
}

// To get number of lines
int getNumberOfLines(char *fileName)
{
    FILE *fp;
    char temp[100];
    int lines = 0;
    fp = fopen(fileName, "r");

    while (!feof(fp))
    {
        fscanf (fp, "%[^\n]\n", temp);
        lines++;
    }

    fclose(fp);

    return lines;
}



int main()
{
    printf ("\n");
    printf ("*** Simple Interpreter ***\n\n");
    system("color f0");

    int ch, lines = getNumberOfLines("Src.txt");
    FILE *fp;

    fp = fopen("Src.txt","r");

    T **arr = malloc(sizeof(T *) * lines);

    Node *root = readFile(fp, arr);

    while (1)
    {
        printf("* Select one of the following commands:\n\n  1- Load File\n  2- BST Sort\n  3- Heap Sort\n  4- EXIT\n\n");
        printf ("* Enter your choice : ");
        scanf("%d",&ch);
        printf ("\n");

        switch (ch)
        {
        // Printing all expressions
        case 1:
            loadFile();
            break;
        // Printing BST InOrder
        case 2:
            InOrderPrint(root);
            printf ("\n");
            break;
        // Printing array using heapSort
        case 3:
            heapSort(arr, lines);
            printArray(arr, lines);
            break;
        // Ending the program
        case 4:
            printf ("*** Thanks ! ***\n\n");
            exit(0);
            break;
        default:
            printf("X Invalid Input X\n\n");
            break;
        }
    }
    return 0;
}
